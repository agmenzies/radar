name,"ring","quadrant","isNew","description"
Dependency drift fitness function,Adopt,Techniques,FALSE,"<p>Fitness functions introduced by <a href=""/radar/Techniques/evolutionary-architecture"">evolutionary architecture</a>, borrowed from <a href=""https://en.wikipedia.org/wiki/Evolutionary_computation#:%7E:text=In%20computer%20science%2C%20evolutionary%20computation,soft%20computing%20studying%20these%20algorithms."">evolutionary computing</a>, are executable functions that inform us if our applications and architecture are objectively moving away from their desired characteristics. They're essentially tests that can be incorporated into our release pipelines. One of the major characteristics of an application is the freshness of its dependencies to other libraries, APIs or environmental components that a <strong>dependency drift fitness function</strong> tracks to flag the out-of-date dependencies that require updating. With the growing and maturing number of tools that detect dependency drifts, such as <a href=""/radar/tools/dependabot"">Dependabot</a> or <a href=""/radar/tools/snyk"">Snyk</a>, we can easily incorporate dependency drift fitness functions into our software release process to take timely action in keeping our application dependencies up to date.</p>"
JupyterLab,Trial,Platforms,FALSE,"<p>Since introducing <strong><a href=""https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html"">JupyterLab</a></strong> in the Assess ring in our last issue, it has become the preferred web-based user interface for Project <a href=""/radar/tools/jupyter"">Jupyter</a> for many of our data practitioners. JupyterLab use is rapidly overtaking Jupyter Notebooks, which it will eventually replace. If you're still using Jupyter Notebooks, you should give JupyterLab a try. Its interactive environment is an evolution of Jupyter Notebook: it extends the original capabilities with drag-and-drop cells and tab autocompletion among other new features.</p>"
Airflow,Adopt,Tools,FALSE,"<p><strong><a href=""https://airflow.apache.org/"">Airflow</a></strong> remains our most widely used and favorite open-source workflow management tool for data-processing pipelines as directed acyclic graphs (DAGs). This is a growing space with open-source tools such as <a href=""https://github.com/spotify/luigi"">Luigi</a> and <a href=""https://github.com/argoproj/argo"">Argo</a> and vendor-specific tools such as <a href=""https://azure.microsoft.com/en-us/services/data-factory/"">Azure Data Factory</a> or <a href=""https://aws.amazon.com/datapipeline/"">AWS Data Pipeline</a>. However, Airflow differentiates itself with its programmatic definition of workflows over limited low-code configuration files, support for automated testing, open-source and multiplatform installation, rich set of integration points to the data ecosystem and large community support. In decentralized data architectures such as <a href=""/radar/Techniques/data-mesh"">data mesh</a>, however, Airflow currently falls short as a centralized workflow orchestration.</p>"
Arrow,Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://arrow-kt.io/"">Arrow</a></strong> is promoted as the functional companion for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin's standard library</a>. Indeed, the package of ready-to-use higher-level abstractions delivered by Arrow has proven so useful that our teams now consider Arrow a sensible default when working with Kotlin. Recently, in preparation for the 1.0 release, the Arrow team introduced several changes, including the addition of new modules but also some deprecations and removals.</p>"
